include: ../../usaco.def

subcode: _autoload
    struct node {
        int length;
        int count;
        long long sub_total;
        long long total;
        std::vector<int> child_list;
    };

page: dirtraverse_gold, basic_frame
    module: cpp

    &call open_In
        $call scan_Int, N

        $my node nodes[N]
        # C++ initialization is very complex. When in doubt, do it explicitly
        $for i=0:N
            $(for:length, count, sub_total, total)
                nodes[i].$1 = 0

        $for i=0:N
            $my s[17], m
            fscanf(In, "%s %d", s, &m)
            nodes[i].length = strlen(s)
            $if m>0
                $for j=0:m
                    $call scan_Int, n
                    nodes[i].child_list.push_back(n-1)

    #---------------------------------------- 
    get_count(0, nodes)

    nodes[0].total = nodes[0].sub_total
    update_count(0, nodes)

    $my long long min = nodes[0].total
    $for i=1:N
        $if nodes[i].child_list.size()>0
            $if min > nodes[i].total
                min = nodes[i].total

    #---------------------------------------- 
    &call open_Out
        $print "%lld", min


#---------------------------------------- 
macros:
    is_leaf: nodes[$1].child_list.empty()

fncode: get_count(i, struct node * nodes)
    $if $(is_leaf:i)
        nodes[i].count = 1
        return

    $foreach j in nodes[i].child_list
        get_count(j, nodes)

    nodes[i].count = 0
    $foreach j in nodes[i].child_list
        nodes[i].count += nodes[j].count

    nodes[i].sub_total = 0
    $foreach j in nodes[i].child_list
        $if $(is_leaf:j)
            nodes[i].sub_total += nodes[j].length
        $else
            nodes[i].sub_total += (nodes[j].length + 1)*nodes[j].count + nodes[j].sub_total
    # $print "nodes $i: count = %d, sub_total = %d", nodes[i].count, nodes[i].sub_total

fncode: update_count(i, struct node * nodes)
    $if nodes[i].child_list.empty()
        return

    n_total_count = nodes[0].count

    $foreach j in nodes[i].child_list
        #  A/B -> B, ../A2/B -> ../../A2/B
        nodes[j].total = nodes[i].total - (nodes[j].length + 1)*nodes[j].count + 3 * (n_total_count - nodes[j].count)
        update_count(j, nodes)




