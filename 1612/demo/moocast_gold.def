include: ../../usaco.def
page: moocast_gold, basic_frame
    module: cpp
    &call open_In
        $call scan_Int, N
        $my int x_list[N], int y_list[N]
        $for i=0:N
            $call scan_int, x_list[i], y_list[i]

    $my int M[N*N]
    $for i=0:N
        $for j=i+1:N
            n = (x_list[i]-x_list[j])^2 + (y_list[i]-y_list[j])^2
            M[i*N+j]=n
            M[j*N+i]=n

    $call try_1
    &call open_Out
        $print $n_max

subcode: try_1 # dijkstra
    $my int L[N] = {0}

    $call @init_cache
    # &call stack_vector
    # &call stack_set
    &call stack_priority_queue
        $call push, 0
        $while stack.size()>0
            $call pop, i
            $call @check_cache
            $for j=0:N
                $if j!=i
                    $my int t = L[i]
                    $if t<M[i*N+j]
                        t=M[i*N+j]
                    $if L[j]==0 || L[j]>t 
                        L[j] = t
                        $call push, j
    $my n_max = 0
    $for i=0:N
        $call update_max, n_max, L[i]

subcode: stack_vector
    $my std::vector<int> stack
    BLOCK

    subcode: push(i)
        stack.push_back($(i))

    subcode: pop(i)
        i = stack.back()
        stack.pop_back()

subcode: stack_set
    $my std::set<int> stack
    BLOCK

    subcode: push(i)
        stack.insert($(i))

    subcode: pop(i)
        $my auto it=stack.begin()
        i = *it
        stack.erase(it)

subcode: stack_priority_queue
    auto cmp_fn = [&](int a, int b) {
        $if L[b]==0
            return false
        $elif L[a]==0
            return true
        $else
            return L[a]>L[b]
    };

    $include <queue>
    std::priority_queue<int, std::vector<int>, decltype(cmp_fn)> stack(cmp_fn);
    BLOCK

    subcode: push(i)
        stack.push($(i))

    subcode: pop(i)
        i=stack.top()
        stack.pop()

    # -------------------
    subcode: init_cache
        $my int visited[N] = {0}
    subcode: check_cache
        $if visited[i]
            continue
        $else
            visited[i]=1

