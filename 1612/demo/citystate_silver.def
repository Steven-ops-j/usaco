tag: map_composite_key

include: ../../usaco.def
page: citystate_silver, basic_frame
    module: cpp
    namespace: std

    $my N: int
    &call open_In
        $call scan_int, N
        # $dump N

        $my char A[N][11]
        $my char B[N][3]

        $for i=0:N
            fscanf(In, "%s %s", A[i], B[i])

    $(if:0)
        $call method_1
    $(else)
        $call method_2
    &call open_Out
        $print $total_count

#----------------------------------------------- 
subcode: method_1
    $my map<int, int> M
    $for i=0:N
        $if !(A[i][0]==B[i][0] && A[i][1]==B[i][1])
            n = (A[i][0]<<24)+(A[i][1]<<16)+(B[i][0]<<8)+(B[i][1])
            M[n]+=1

    $my int total_count = 0
    $foreach it in M
        n_1 = it.first
        n_2 = (n_1>>16) + ((n_1 & 0xffff)<<16)
        total_count += M[n_1] * M[n_2]
        
    total_count /= 2

#----------------------------------------------- 
subcode: method_2
    $call @radix_sort
    $my int total_count = 0
    $for i=0:$(M)
        $for j=0:cnt[i]
            k = L[idx[i]+j]
            i_city = $(I:A[k])
            $if i_city > i
                $for j2=0:cnt[i_city]
                    k2 = L[idx[i_city]+j2]
                    $if $(I:A[k2])==i
                        total_count++

    macros:
        M: 26*26
        I: ($1[0]-'A')*26 + ($1[1]-'A')

    subcode: count_basic
        n = 0
        $for i=0:N
            $my int iA=$(I:A[i])
            $my int iB=$(I:B[i])
            $for j=i+1:N
                $(set:EQ=$1[0]==$2[0] && $1[1]==$2[1])
                $if !($(EQ:B[i],B[j]))
                    $if $(EQ:A[i],B[j])
                        $if $(EQ:A[j],B[i])
                            n++
    subcode: radix_sort
        $my int M=$(M)
        $my int cnt[$(M)]={0}
        $for i=0:N
            n = $(I:B[i])
            cnt[n]++
        $my int idx[$(M)]
        k = 0
        $for i=0:$(M)
            idx[i]=k
            k+=cnt[i]

        $my int off[$(M)]={0}
        $my int L[N]
        $for i=0:N
            n = $(I:B[i])
            j = idx[n]+off[n]
            L[j]=i
            off[n]++
