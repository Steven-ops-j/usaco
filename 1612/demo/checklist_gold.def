include: ../../usaco.def
page: checklist_gold, basic_frame
    module: cpp

    $global x_list, y_list: int *
    &call open_In
        $call scan_Int, H,G
        x_list = new int[H+G]
        y_list = new int[H+G]
        $for i=0:H+G
            $call scan_int, x_list[i], y_list[i]
    $list dist

    $(if:0)
        $call try_1
    $(else)
        $call try_2
    &call open_Out
        $print $n

subcode: try_2
    $include limits
    $include <algorithm>

    $global int DP[1001][1001][2] # h, g, last at H or G
    $for g=1 to G
        DP[0][g][0] = -1
        DP[0][g][1] = -1
    DP[1][0][0] = 0           # 1 H, 0 G, at H
    DP[1][0][1] = -1
    $for h=2 to H
        DP[h][0][0] = DP[h-1][0][0] + dist(h-2, h-1)
        DP[h][0][1] = -1
        $call @dump, h, 0, 0
    $for h=1 to H
        $for g=1 to G
            $my t1, t2, t: int
            $(set:update= $1<0?INT_MAX:$1+dist($2, $3))
            t1 = $(update:DP[h-1][g][0], h-2, h-1)
            t2 = $(update:DP[h-1][g][1], H+g-1, h-1)
            t = std::min(t1, t2)
            DP[h][g][0]  = (t==INT_MAX? -1: t);
            $call @dump, h, g, 0

            t1 = $(update:DP[h][g-1][0], h-1, H+g-1)
            t2 = $(update:DP[h][g-1][1], H+g-2, H+g-1)
            t = std::min(t1, t2)
            DP[h][g][1]  = (t==INT_MAX? -1: t);
            $call @dump, h, g, 1
    n = DP[H][G][0]

    subcode: dump(h, g, s)
        # $print "%d %d %d: %d", $(h), $(g), $(s), DP[$(h)][$(g)][$(s)]

fncode: dist(i, j)
    n_x = x_list[i] - x_list[j]
    n_y = y_list[i] - y_list[j]
    return n_x^2 + n_y^2

subcode: try_1
    $my $(T_vn2) Q
    Q.push_back({0,0})
    $for i=1:H+G
        $my $(T_map) M
        $foreach q in Q
            $my int j = q.first
            $my int cost = q.second
            $if j<H
                $if j+1<H
                    $call add, j, j+1
                $if H+i-1-j<H+G
                    $call add, j, H+i-1-j
            $else
                $if j+1<H+G
                    $call add, j, j+1
                $if i-1-(j-H)<H
                    $call add, j, i-1-(j-H)
        Q.clear()
        $foreach it in M
            # $dump i, it.first, it.second
            Q.push_back(it)

    n = Q[0].second
    subcode: add(i, j)
        $if $(j)!=H-1 || i==H+G-1
            $my int t = cost+dist($(i), $(j))
            $if M.count($(j))==0
                M[$(j)]=t
            $elif M[$(j)]>t
                M[$(j)]=t
