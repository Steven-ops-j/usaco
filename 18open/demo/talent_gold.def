include: ../../usaco.def
page: talent_gold, basic_frame
    module: cpp

    &call open_In
        $global int N, int W, int* w_list, int* t_list
        $call scan_int, N, W
        w_list = new int[N]
        t_list = new int[N]
        $for i=0:N
            $call scan_int, w_list[i], t_list[i]

    # $call try_1
    $call try_2

    &call open_Out
        $print $y

#---------------------------------------- 
subcode: try_2
    i1 = 0
    i2 = 1000*1000*250
    $while i1<=i2
        i3 = (i1+i2)/2
        $if try_y(i3)
            i1=i3+1
        $else
            i2=i3-1
    $my int y = i2

fncode: try_y(int y)
    $include <climits>
    $(set:Inf=LLONG_MIN)

    # dynamic programming
    $my long long  T[W+1]
    $for i=0:W+1
        T[i] = $(Inf)
    T[0] = 0

    $for j=0:N
        $my long long n_inc
        n_inc = (long long)1000*t_list[j]-(long long)y*w_list[j]
        $for i_w=W downto 0
            $if T[i_w]!=$(Inf)
                w = i_w + w_list[j]
                $if w>W
                    w=W

                $if T[w]<T[i_w]+n_inc
                    T[w]=T[i_w]+n_inc
    # $dump y, T[W]
    $if T[W]>=0
        return 1
    $else
        return 0

#---------------------------------------- 
# First try -> the problem is more complex than thought
subcode: try_1
    $my double r_list[N]
    $for i=0:N
        r_list[i] = (double)t_list[i]/w_list[i]

    $my int P[N]
    $for i=0:N
        P[i]=i
    &call std_sort, P, N, int
        return r_list[a]<r_list[b]

    $my int w_total=0, int t_total=0
    $for i=0:N
        w_total += w_list[i]
        t_total += t_list[i]
    $my double r_avg = (double)t_total/w_total

    $my int in_list[N]
    $for i_p=0:N
        in_list[i_p] = 1

    i_p = 0
    i = P[i_p]
    $while r_list[i]<r_avg
        $dump i_p, r_avg, w_list[i], t_list[i], r_list[i], w_total-W
        $if w_total-w_list[i]>=W
            in_list[i_p] = 0
            w_total-=w_list[i]
            t_total-=t_list[i]
            r_avg = (double)t_total/w_total
            $dump r_avg
        $else

        i_p++
        $if i_p<N
            i = P[i_p]
        $else
            break

    $my int y = 1000*r_avg

    $dump i_p,  w_list[i], t_list[i], r_list[i]
