# tag: binary-index-tree
include: ../../usaco.def
page: sleepy_gold,basic_frame
    module: cpp

    &call open_In
        $call scan_Int, N
        $my int p_list[N]
        $for i=0:N
            $call scan_int, p_list[i]
            p_list[i]--

    $my i_N
    $for i=N-1 downto 1
        $if p_list[i-1] > p_list[i]
            i_N = i
            break

    # --------------
    $my int C[i_N]

    # $call try_0
    # $call try_1
    $call try_2

    # $call dump_array, C, i_N
    # --------------
    &call open_Out
        $print $i_N
        $for i=0:i_N-1
            $print "%d -", C[i]
        $print "%d", C[i_N-1]


subcode: try_0
    $for i=0:i_N
        $my int t = p_list[0]
        k = i_N-i
        $while k<N && p_list[k]<t
            k++
        C[i] = k-1

        $for j=0:k
            p_list[j] = p_list[j+1]
        p_list[k-1]=t
        # $call dump_array, p_list, N

subcode: try_1
    $my int P[i_N]
    $for i=0:i_N
        P[i]=i
    &call std_sort, P, i_N, int
        return p_list[a]<p_list[b]

    $my int Q[i_N]
    $for i=0:i_N
        Q[P[i]]=i

    &call fenwick, N
        $for i=i_N-1 downto 0
            k = Q[i]
            $call get_sum, k
            # k numbers went after it, but sum numbers stays after it
            # $dump i, k, sum, i_N-i-1
            C[i] = k - sum + (i_N-i-1)
            $call add, k, 1

    # add up the additional distance
    $for i=0:i_N
        n = bin_search(p_list, p_list[i], i_N, N-1)
        C[i]+=n-i_N

fncode: bin_search(int *p_list, int t, i1, i2)
    $if t<p_list[i1]
        return i1
    $if t>p_list[i2]
        return i2+1
    $while i1<=i2
        i3 = (i1+i2)/2
        $if t<p_list[i3]
            i2 = i3-1
        $else
            i1 = i3+1
    return i1

fncode: try_2
    &call fenwick, N
        $for i=i_N:N
            $call add, p_list[i], 1
        $for i=0:i_N
            $call get_sum, p_list[i]
            C[i] = i_N-1 - i + sum
            $call add, p_list[i], 1

#---------------------------------------- 
subcode: fenwick(N)
    $call init_C
    BLOCK

    subcode: init_C
        $my int _C[$(N)]
        $for i=0:$(N)
            _C[i] = 0

    subcode: add(i, v)
        j = $(i)
        $while j<$(N)
            _C[j]+=$(v)
            $if j==0
                j++
            $else
                j+=(j&-j)

    subcode: get_sum(i)
        $my int sum = 0
        j = $(i)
        $if j==0
            sum = _C[0]
        $else
            $while j>0
                sum += _C[j]
                j-=(j&-j)

    # ---------------
    subcode: dump
        $for _i=0:$(N)
            $call get_sum, _i
            $print "%d -", sum
        $print
            



