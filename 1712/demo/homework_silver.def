include: ../../usaco.def

page: homework_silver, basic_frame
    module: cpp

    $my int N
    &call open_In
        $call scan_int, N
        # $my int L[N]
        $global int *L
        L=new int[N]
        $for i=0:N
            $call scan_int, L[i]

    $my std::vector<int> max_list
    $(if:0)
        $call try1
        &call open_Out
            $for i=0:max_list.size()
                $print "%d", max_list[i]
    $(else)
        $call try2
        &call open_Out
            $for i=max_list.size()-1 downto 0
                $print "%d", max_list[i]

    subcode: update_max(sum, min, K)
        $my double t = $(sum)-$(min)
        # $dump j, t, max
        t/=N-($(K))-1
        $if max<t
            max=t
            max_list.clear()
            max_list.push_back($(K))
        $elif max==t
            max_list.push_back($(K))


subcode: try2
    $my double max = 0
    $my int sum = L[N-1]
    $my int min = L[N-1]

    $for j=N-2 downto 1
        sum += L[j]
        $if min > L[j]
            min = L[j]
        $call update_max, sum, min, j


subcode: try1
    # sorted list to facilitate finding min.
    $my int idx_list[N]
    $for i=0:N
        idx_list[i]=i

    &call std_sort, idx_list, N, int
        return L[a]<L[b]

    # $call debug_L
    $my int sum=0
    $for i=0:N
        sum+=L[i]

    $my double max=0

    $my int i0=0
    # NOTE: if we reverse the loop, maintaining min is O(1)
    $for j=0:N-2
        sum-=L[j]
        $while idx_list[i0]<=j
            i0++

        $call @update_max, sum, L[idx_list[i0]], j+1
